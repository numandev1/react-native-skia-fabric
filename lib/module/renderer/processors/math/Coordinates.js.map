{"version":3,"sources":["Coordinates.ts"],"names":["canvas2Cartesian","v","center","x","y","cartesian2Canvas","cartesian2Polar","theta","Math","atan2","radius","sqrt","polar2Cartesian","p","cos","sin","polar2Canvas","canvas2Polar"],"mappings":"AAOA,OAAO,MAAMA,gBAAgB,GAAG,CAACC,CAAD,EAAYC,MAAZ,MAAgC;AAC9DC,EAAAA,CAAC,EAAEF,CAAC,CAACE,CAAF,GAAMD,MAAM,CAACC,CAD8C;AAE9DC,EAAAA,CAAC,EAAE,CAAC,CAAD,IAAMH,CAAC,CAACG,CAAF,GAAMF,MAAM,CAACE,CAAnB;AAF2D,CAAhC,CAAzB;AAKP,OAAO,MAAMC,gBAAgB,GAAG,CAACJ,CAAD,EAAYC,MAAZ,MAAgC;AAC9DC,EAAAA,CAAC,EAAEF,CAAC,CAACE,CAAF,GAAMD,MAAM,CAACC,CAD8C;AAE9DC,EAAAA,CAAC,EAAE,CAAC,CAAD,GAAKH,CAAC,CAACG,CAAP,GAAWF,MAAM,CAACE;AAFyC,CAAhC,CAAzB;AAKP,OAAO,MAAME,eAAe,GAAIL,CAAD,KAAgB;AAC7CM,EAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWR,CAAC,CAACG,CAAb,EAAgBH,CAAC,CAACE,CAAlB,CADsC;AAE7CO,EAAAA,MAAM,EAAEF,IAAI,CAACG,IAAL,CAAUV,CAAC,CAACE,CAAF,IAAO,CAAP,GAAWF,CAAC,CAACG,CAAF,IAAO,CAA5B;AAFqC,CAAhB,CAAxB;AAKP,OAAO,MAAMQ,eAAe,GAAIC,CAAD,KAAoB;AACjDV,EAAAA,CAAC,EAAEU,CAAC,CAACH,MAAF,GAAWF,IAAI,CAACM,GAAL,CAASD,CAAC,CAACN,KAAX,CADmC;AAEjDH,EAAAA,CAAC,EAAES,CAAC,CAACH,MAAF,GAAWF,IAAI,CAACO,GAAL,CAASF,CAAC,CAACN,KAAX;AAFmC,CAApB,CAAxB;AAKP,OAAO,MAAMS,YAAY,GAAG,CAACH,CAAD,EAAgBX,MAAhB,KAC1BG,gBAAgB,CAACO,eAAe,CAACC,CAAD,CAAhB,EAAqBX,MAArB,CADX;AAGP,OAAO,MAAMe,YAAY,GAAG,CAAChB,CAAD,EAAYC,MAAZ,KAC1BI,eAAe,CAACN,gBAAgB,CAACC,CAAD,EAAIC,MAAJ,CAAjB,CADV","sourcesContent":["import type { Vector } from \"../../../skia/types\";\n\nexport interface PolarPoint {\n  theta: number;\n  radius: number;\n}\n\nexport const canvas2Cartesian = (v: Vector, center: Vector) => ({\n  x: v.x - center.x,\n  y: -1 * (v.y - center.y),\n});\n\nexport const cartesian2Canvas = (v: Vector, center: Vector) => ({\n  x: v.x + center.x,\n  y: -1 * v.y + center.y,\n});\n\nexport const cartesian2Polar = (v: Vector) => ({\n  theta: Math.atan2(v.y, v.x),\n  radius: Math.sqrt(v.x ** 2 + v.y ** 2),\n});\n\nexport const polar2Cartesian = (p: PolarPoint) => ({\n  x: p.radius * Math.cos(p.theta),\n  y: p.radius * Math.sin(p.theta),\n});\n\nexport const polar2Canvas = (p: PolarPoint, center: Vector) =>\n  cartesian2Canvas(polar2Cartesian(p), center);\n\nexport const canvas2Polar = (v: Vector, center: Vector) =>\n  cartesian2Polar(canvas2Cartesian(v, center));\n"]}