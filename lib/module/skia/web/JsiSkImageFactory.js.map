{"version":3,"sources":["JsiSkImageFactory.ts"],"names":["Host","ckEnum","JsiSkImage","JsiSkData","JsiSkImageFactory","constructor","CanvasKit","MakeImageFromEncoded","encoded","image","fromValue","MakeImage","info","data","bytesPerRow","alphaType","colorSpace","ColorSpace","SRGB","colorType","height","width"],"mappings":"AAKA,SAASA,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,iBAAN,SAAgCJ,IAAhC,CAA6D;AAClEK,EAAAA,WAAW,CAACC,SAAD,EAAuB;AAChC,UAAMA,SAAN;AACD;;AAEDC,EAAAA,oBAAoB,CAACC,OAAD,EAAkB;AACpC,UAAMC,KAAK,GAAG,KAAKH,SAAL,CAAeC,oBAAf,CACZJ,SAAS,CAACO,SAAV,CAAoBF,OAApB,CADY,CAAd;;AAGA,QAAIC,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,IAAIP,UAAJ,CAAe,KAAKI,SAApB,EAA+BG,KAA/B,CAAP;AACD;;AAEDE,EAAAA,SAAS,CAACC,IAAD,EAAkBC,IAAlB,EAAgCC,WAAhC,EAAqD;AAC5D;AACA,UAAML,KAAK,GAAG,KAAKH,SAAL,CAAeK,SAAf,CACZ;AACEI,MAAAA,SAAS,EAAEd,MAAM,CAACW,IAAI,CAACG,SAAN,CADnB;AAEEC,MAAAA,UAAU,EAAE,KAAKV,SAAL,CAAeW,UAAf,CAA0BC,IAFxC;AAGEC,MAAAA,SAAS,EAAElB,MAAM,CAACW,IAAI,CAACO,SAAN,CAHnB;AAIEC,MAAAA,MAAM,EAAER,IAAI,CAACQ,MAJf;AAKEC,MAAAA,KAAK,EAAET,IAAI,CAACS;AALd,KADY,EAQZlB,SAAS,CAACO,SAAV,CAAoBG,IAApB,CARY,EASZC,WATY,CAAd;;AAWA,QAAIL,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,IAAIP,UAAJ,CAAe,KAAKI,SAApB,EAA+BG,KAA/B,CAAP;AACD;;AAhCiE","sourcesContent":["import type { CanvasKit } from \"canvaskit-wasm\";\n\nimport type { SkData, ImageInfo } from \"../types\";\nimport type { ImageFactory } from \"../types/Image/ImageFactory\";\n\nimport { Host, ckEnum } from \"./Host\";\nimport { JsiSkImage } from \"./JsiSkImage\";\nimport { JsiSkData } from \"./JsiSkData\";\n\nexport class JsiSkImageFactory extends Host implements ImageFactory {\n  constructor(CanvasKit: CanvasKit) {\n    super(CanvasKit);\n  }\n\n  MakeImageFromEncoded(encoded: SkData) {\n    const image = this.CanvasKit.MakeImageFromEncoded(\n      JsiSkData.fromValue(encoded)\n    );\n    if (image === null) {\n      return null;\n    }\n    return new JsiSkImage(this.CanvasKit, image);\n  }\n\n  MakeImage(info: ImageInfo, data: SkData, bytesPerRow: number) {\n    // see toSkImageInfo() from canvaskit\n    const image = this.CanvasKit.MakeImage(\n      {\n        alphaType: ckEnum(info.alphaType),\n        colorSpace: this.CanvasKit.ColorSpace.SRGB,\n        colorType: ckEnum(info.colorType),\n        height: info.height,\n        width: info.width,\n      },\n      JsiSkData.fromValue(data),\n      bytesPerRow\n    );\n    if (image === null) {\n      return null;\n    }\n    return new JsiSkImage(this.CanvasKit, image);\n  }\n}\n"]}