{"version":3,"sources":["DrawingNode.ts"],"names":["JsiDeclarationNode","PaintNode","isSkPaint","JsiRenderNode","JsiDrawingNode","constructor","ctx","type","props","derived","deriveProps","setProps","setProp","name","value","hasChanged","addChild","child","Error","insertChildBefore","before","renderNode","paint","draw","current","materialize","children","map"],"mappings":";;AASA,SAASA,kBAAT,QAAmC,QAAnC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,cAAzC;AAEA,OAAO,MAAeC,cAAf,SACGD,aADH,CAGP;AAGEE,EAAAA,WAAW,CAACC,GAAD,EAAmBC,IAAnB,EAAmCC,KAAnC,EAA6C;AACtD,UAAMF,GAAN,EAAWC,IAAX,EAAiBC,KAAjB;;AADsD;;AAEtD,SAAKC,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;;AAEDC,EAAAA,QAAQ,CAACH,KAAD,EAAW;AACjB,UAAMG,QAAN,CAAeH,KAAf;AACA,SAAKC,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;;AAEDE,EAAAA,OAAO,CAAoBC,IAApB,EAA6BC,KAA7B,EAA0C;AAC/C,UAAMC,UAAU,GAAG,MAAMH,OAAN,CAAcC,IAAd,EAAoBC,KAApB,CAAnB;;AACA,QAAIC,UAAJ,EAAgB;AACd,WAAKN,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;;AACD,WAAOK,UAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAA6B;AACnC,QAAI,EAAEA,KAAK,YAAYjB,kBAAnB,CAAJ,EAA4C;AAC1C,YAAM,IAAIkB,KAAJ,CAAW,cAAaD,KAAK,CAACV,IAAK,OAAM,KAAKA,IAAK,EAAnD,CAAN;AACD;;AACD,UAAMS,QAAN,CAAeC,KAAf;AACA,SAAKR,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;;AAEDS,EAAAA,iBAAiB,CAACF,KAAD,EAAuBG,MAAvB,EAAoD;AACnE,QAAI,EAAEH,KAAK,YAAYjB,kBAAnB,CAAJ,EAA4C;AAC1C,YAAM,IAAIkB,KAAJ,CAAW,cAAaD,KAAK,CAACV,IAAK,OAAM,KAAKA,IAAK,EAAnD,CAAN;AACD;;AACD,UAAMY,iBAAN,CAAwBF,KAAxB,EAA+BG,MAA/B;AACA,SAAKX,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;;AAEDW,EAAAA,UAAU,CAACf,GAAD,EAA4B;AACpC,QAAI,KAAKE,KAAL,CAAWc,KAAX,IAAoBpB,SAAS,CAAC,KAAKM,KAAL,CAAWc,KAAZ,CAAjC,EAAqD;AACnD,WAAKC,IAAL,CAAU,EAAE,GAAGjB,GAAL;AAAUgB,QAAAA,KAAK,EAAE,KAAKd,KAAL,CAAWc;AAA5B,OAAV;AACD,KAFD,MAEO,IAAI,KAAKd,KAAL,CAAWc,KAAX,IAAoB,KAAKd,KAAL,CAAWc,KAAX,CAAiBE,OAAjB,IAA4B,IAApD,EAA0D;AAC/D,WAAKD,IAAL,CAAU,EAAE,GAAGjB,GAAL;AAAUgB,QAAAA,KAAK,EAAE,KAAKd,KAAL,CAAWc,KAAX,CAAiBE,OAAjB,CAAyBC,WAAzB;AAAjB,OAAV;AACD,KAFM,MAEA;AACL,WAAKF,IAAL,CAAUjB,GAAV;AACD;;AACD,SAAKoB,QAAL,GAAgBC,GAAhB,CAAqBV,KAAD,IAAW;AAC7B,UAAIA,KAAK,YAAYhB,SAArB,EAAgC;AAC9B,cAAMqB,KAAK,GAAGL,KAAK,CAACQ,WAAN,EAAd;AACA,aAAKF,IAAL,CAAU,EAAE,GAAGjB,GAAL;AAAUgB,UAAAA;AAAV,SAAV;AACD;AACF,KALD;AAMD;;AAnDH","sourcesContent":["import type {\n  DrawingContext,\n  DrawingNodeProps,\n  Node,\n  NodeType,\n  RenderNode,\n} from \"../types\";\n\nimport type { NodeContext } from \"./Node\";\nimport { JsiDeclarationNode } from \"./Node\";\nimport { PaintNode } from \"./PaintNode\";\nimport { isSkPaint, JsiRenderNode } from \"./RenderNode\";\n\nexport abstract class JsiDrawingNode<P extends DrawingNodeProps, C>\n  extends JsiRenderNode<P>\n  implements RenderNode<P>\n{\n  protected derived?: C;\n\n  constructor(ctx: NodeContext, type: NodeType, props: P) {\n    super(ctx, type, props);\n    this.derived = this.deriveProps();\n  }\n\n  setProps(props: P) {\n    super.setProps(props);\n    this.derived = this.deriveProps();\n  }\n\n  setProp<K extends keyof P>(name: K, value: P[K]) {\n    const hasChanged = super.setProp(name, value);\n    if (hasChanged) {\n      this.derived = this.deriveProps();\n    }\n    return hasChanged;\n  }\n\n  addChild(child: Node<unknown>): void {\n    if (!(child instanceof JsiDeclarationNode)) {\n      throw new Error(`Cannot add ${child.type} to ${this.type}`);\n    }\n    super.addChild(child);\n    this.derived = this.deriveProps();\n  }\n\n  insertChildBefore(child: Node<unknown>, before: Node<unknown>): void {\n    if (!(child instanceof JsiDeclarationNode)) {\n      throw new Error(`Cannot add ${child.type} to ${this.type}`);\n    }\n    super.insertChildBefore(child, before);\n    this.derived = this.deriveProps();\n  }\n\n  renderNode(ctx: DrawingContext): void {\n    if (this.props.paint && isSkPaint(this.props.paint)) {\n      this.draw({ ...ctx, paint: this.props.paint });\n    } else if (this.props.paint && this.props.paint.current != null) {\n      this.draw({ ...ctx, paint: this.props.paint.current.materialize() });\n    } else {\n      this.draw(ctx);\n    }\n    this.children().map((child) => {\n      if (child instanceof PaintNode) {\n        const paint = child.materialize();\n        this.draw({ ...ctx, paint });\n      }\n    });\n  }\n\n  protected abstract draw(ctx: DrawingContext): void;\n  protected abstract deriveProps(): C;\n}\n"]}