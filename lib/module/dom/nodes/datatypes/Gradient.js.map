{"version":3,"sources":["Gradient.ts"],"names":["TileMode","enumKey","processTransformProps","transformOrigin","origin","transform","translateX","x","translateY","y","processGradientProps","Skia","colors","positions","mode","flags","localMatrix","Matrix","map","color","Color","getRect","props","width","height","rect","undefined","XYWHRect"],"mappings":"AACA,SAASA,QAAT,QAAyB,qBAAzB;AAGA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,qBAAT,QAAsC,aAAtC;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,MAAD,EAAiBC,SAAjB,KAA6C,CAC1E;AAAEC,EAAAA,UAAU,EAAEF,MAAM,CAACG;AAArB,CAD0E,EAE1E;AAAEC,EAAAA,UAAU,EAAEJ,MAAM,CAACK;AAArB,CAF0E,EAG1E,GAAGJ,SAHuE,EAI1E;AAAEC,EAAAA,UAAU,EAAE,CAACF,MAAM,CAACG;AAAtB,CAJ0E,EAK1E;AAAEC,EAAAA,UAAU,EAAE,CAACJ,MAAM,CAACK;AAAtB,CAL0E,CAArE;AAQP,OAAO,MAAMC,oBAAoB,GAAG,CAClCC,IADkC,WAG/B;AAAA,MADH;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA,KAA3B;AAAkC,OAAGV;AAArC,GACG;AACH,QAAMW,WAAW,GAAGL,IAAI,CAACM,MAAL,EAApB;AACAf,EAAAA,qBAAqB,CAACc,WAAD,EAAcX,SAAd,CAArB;AACA,SAAO;AACLO,IAAAA,MAAM,EAAEA,MAAM,CAACM,GAAP,CAAYC,KAAD,IAAWR,IAAI,CAACS,KAAL,CAAWD,KAAX,CAAtB,CADH;AAELN,IAAAA,SAAS,EAAEA,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe,IAFnB;AAGLC,IAAAA,IAAI,EAAEd,QAAQ,CAACC,OAAO,CAACa,IAAD,aAACA,IAAD,cAACA,IAAD,GAAS,OAAT,CAAR,CAHT;AAILC,IAAAA,KAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CAbM;AAeP,OAAO,MAAMK,OAAO,GAAG,CACrBV,IADqB,EAErBW,KAFqB,KAGE;AACvB,QAAM;AAAEf,IAAAA,CAAF;AAAKE,IAAAA,CAAL;AAAQc,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA0BF,KAAhC;;AACA,MAAIA,KAAK,CAACG,IAAV,EAAgB;AACd,WAAOH,KAAK,CAACG,IAAb;AACD,GAFD,MAEO,IACLlB,CAAC,KAAKmB,SAAN,IACAjB,CAAC,KAAKiB,SADN,IAEAH,KAAK,KAAKG,SAFV,IAGAF,MAAM,KAAKE,SAJN,EAKL;AACA,WAAOf,IAAI,CAACgB,QAAL,CAAcpB,CAAd,EAAiBE,CAAjB,EAAoBc,KAApB,EAA2BC,MAA3B,CAAP;AACD,GAPM,MAOA;AACL,WAAOE,SAAP;AACD;AACF,CAjBM","sourcesContent":["import type { Skia, SkRect, Transforms2d, Vector } from \"../../../skia/types\";\nimport { TileMode } from \"../../../skia/types\";\nimport type { GradientProps, ImageShaderProps } from \"../../types\";\n\nimport { enumKey } from \"./Enum\";\nimport { processTransformProps } from \"./Transform\";\n\nexport const transformOrigin = (origin: Vector, transform: Transforms2d) => [\n  { translateX: origin.x },\n  { translateY: origin.y },\n  ...transform,\n  { translateX: -origin.x },\n  { translateY: -origin.y },\n];\n\nexport const processGradientProps = (\n  Skia: Skia,\n  { colors, positions, mode, flags, ...transform }: GradientProps\n) => {\n  const localMatrix = Skia.Matrix();\n  processTransformProps(localMatrix, transform);\n  return {\n    colors: colors.map((color) => Skia.Color(color)),\n    positions: positions ?? null,\n    mode: TileMode[enumKey(mode ?? \"clamp\")],\n    flags,\n    localMatrix,\n  };\n};\n\nexport const getRect = (\n  Skia: Skia,\n  props: Omit<ImageShaderProps, \"tx\" | \"ty\" | \"fm\" | \"mm\" | \"fit\" | \"image\">\n): SkRect | undefined => {\n  const { x, y, width, height } = props;\n  if (props.rect) {\n    return props.rect;\n  } else if (\n    x !== undefined &&\n    y !== undefined &&\n    width !== undefined &&\n    height !== undefined\n  ) {\n    return Skia.XYWHRect(x, y, width, height);\n  } else {\n    return undefined;\n  }\n};\n"]}