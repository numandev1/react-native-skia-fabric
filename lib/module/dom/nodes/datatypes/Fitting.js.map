{"version":3,"sources":["Fitting.ts"],"names":["exhaustiveCheck","size","width","height","rect2rect","src","dst","scaleX","scaleY","translateX","x","translateY","y","fitRects","fit","rect","sizes","applyBoxFit","inscribe","halfWidthDelta","halfHeightDelta","input","output","Math","min","aspectRatio"],"mappings":"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","sourcesContent":["import { exhaustiveCheck } from \"../../../renderer/typeddash\";\nimport type { SkRect } from \"../../../skia/types\";\nimport type { Fit } from \"../../types\";\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport const size = (width = 0, height = 0) => ({ width, height });\n\nexport const rect2rect = (src: SkRect, dst: SkRect) => {\n  const scaleX = dst.width / src.width;\n  const scaleY = dst.height / src.height;\n  const translateX = dst.x - src.x * scaleX;\n  const translateY = dst.y - src.y * scaleY;\n  return [{ translateX }, { translateY }, { scaleX }, { scaleY }] as const;\n};\n\nexport const fitRects = (\n  fit: Fit,\n  rect: SkRect,\n  { x, y, width, height }: SkRect\n) => {\n  const sizes = applyBoxFit(\n    fit,\n    { width: rect.width, height: rect.height },\n    { width, height }\n  );\n  const src = inscribe(sizes.src, rect);\n  const dst = inscribe(sizes.dst, {\n    x,\n    y,\n    width,\n    height,\n  });\n  return { src, dst };\n};\n\nconst inscribe = (\n  { width, height }: Size,\n  rect: { x: number; y: number; width: number; height: number }\n) => {\n  const halfWidthDelta = (rect.width - width) / 2.0;\n  const halfHeightDelta = (rect.height - height) / 2.0;\n  return {\n    x: rect.x + halfWidthDelta,\n    y: rect.y + halfHeightDelta,\n    width,\n    height,\n  };\n};\n\nconst applyBoxFit = (fit: Fit, input: Size, output: Size) => {\n  let src = size(),\n    dst = size();\n  if (\n    input.height <= 0.0 ||\n    input.width <= 0.0 ||\n    output.height <= 0.0 ||\n    output.width <= 0.0\n  ) {\n    return { src, dst };\n  }\n  switch (fit) {\n    case \"fill\":\n      src = input;\n      dst = output;\n      break;\n    case \"contain\":\n      src = input;\n      if (output.width / output.height > src.width / src.height) {\n        dst = size((src.width * output.height) / src.height, output.height);\n      } else {\n        dst = size(output.width, (src.height * output.width) / src.width);\n      }\n      break;\n    case \"cover\":\n      if (output.width / output.height > input.width / input.height) {\n        src = size(input.width, (input.width * output.height) / output.width);\n      } else {\n        src = size((input.height * output.width) / output.height, input.height);\n      }\n      dst = output;\n      break;\n    case \"fitWidth\":\n      src = size(input.width, (input.width * output.height) / output.width);\n      dst = size(output.width, (src.height * output.width) / src.width);\n      break;\n    case \"fitHeight\":\n      src = size((input.height * output.width) / output.height, input.height);\n      dst = size((src.width * output.height) / src.height, output.height);\n      break;\n    case \"none\":\n      src = size(\n        Math.min(input.width, output.width),\n        Math.min(input.height, output.height)\n      );\n      dst = src;\n      break;\n    case \"scaleDown\":\n      src = input;\n      dst = input;\n      const aspectRatio = input.width / input.height;\n      if (dst.height > output.height) {\n        dst = size(output.height * aspectRatio, output.height);\n      }\n      if (dst.width > output.width) {\n        dst = size(output.width, output.width / aspectRatio);\n      }\n      break;\n    default:\n      exhaustiveCheck(fit);\n  }\n  return { src, dst };\n};\n"]}