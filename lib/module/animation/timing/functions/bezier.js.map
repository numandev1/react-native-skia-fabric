{"version":3,"sources":["bezier.ts"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","a","aA1","aA2","b","c","calcBezier","aT","getSlope","binarySubdivide","aX","_aA","_aB","mX1","mX2","currentX","currentT","i","aA","aB","Math","abs","newtonRaphsonIterate","_aGuessT","aGuessT","currentSlope","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","x"],"mappings":"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","sourcesContent":["// eslint-disable-next-line max-len\n// Taken from https://github.com/facebook/react-native/blob/0b9ea60b4fee8cacc36e7160e31b91fc114dbc0d/Libraries/Animated/src/bezier.js\n\nconst NEWTON_ITERATIONS = 4;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\n\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nconst float32ArraySupported = typeof Float32Array === \"function\";\n\nfunction a(aA1: number, aA2: number): number {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction b(aA1: number, aA2: number): number {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction c(aA1: number): number {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT: number, aA1: number, aA2: number): number {\n  return ((a(aA1, aA2) * aT + b(aA1, aA2)) * aT + c(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT: number, aA1: number, aA2: number): number {\n  return 3.0 * a(aA1, aA2) * aT * aT + 2.0 * b(aA1, aA2) * aT + c(aA1);\n}\n\nfunction binarySubdivide({\n  aX,\n  _aA,\n  _aB,\n  mX1,\n  mX2,\n}: {\n  aX: number;\n  _aA: number;\n  _aB: number;\n  mX1: number;\n  mX2: number;\n}): number {\n  let currentX;\n  let currentT;\n  let i = 0;\n  let aA = _aA;\n  let aB = _aB;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(\n  aX: number,\n  _aGuessT: number,\n  mX1: number,\n  mX2: number\n): number {\n  let aGuessT = _aGuessT;\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nexport function bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error(\"bezier x values must be in [0, 1] range\");\n  }\n\n  // Precompute samples table\n  const sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (let i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX: number): number {\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    }\n\n    if (initialSlope === 0.0) {\n      return guessForT;\n    }\n\n    return binarySubdivide({\n      aX,\n      _aA: intervalStart,\n      _aB: intervalStart + kSampleStepSize,\n      mX1,\n      mX2,\n    });\n  }\n\n  return function (x: number): number {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"]}