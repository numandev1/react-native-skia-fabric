{"version":3,"sources":["useSharedValueEffect.ts"],"names":["useEffect","useMemo","Reanimated","Core","require","e","useSharedValueWrapper","useSharedValue","undefined","value","useSharedValueEffect","cb","values","input","runOnJS","startMapper","stopMapper","console","warn","mapperId"],"mappings":";;AAAA;;AACA;;AACA;AACA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC,C,CAEA;;AACA,IAAIC,UAAJ;AACA,IAAIC,IAAJ;;AAGA,IAAI;AACFD,EAAAA,UAAU,GAAGE,OAAO,CAAC,yBAAD,CAApB;AACAD,EAAAA,IAAI,GAAGC,OAAO,CAAC,8CAAD,CAAd;AACD,CAHD,CAGE,OAAOC,CAAP,EAAU,CACV;AACD;;AAMD,MAAMC,qBAAqB,GACzB,gBAAAJ,UAAU,UAAV,kDAAYK,cAAZ,MAA+BC,SAA/B,GACKC,KAAD,IAAmBR,OAAO,CAAC,OAAO;AAAEQ,EAAAA;AAAF,CAAP,CAAD,EAAoB,CAACA,KAAD,CAApB,CAD9B,GAEIP,UAAU,CAACK,cAHjB;AAKA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,oBAAoB,GAAG,UAClCC,EADkC,EAElCF,KAFkC,EAI/B;AAAA,oCADAG,MACA;AADAA,IAAAA,MACA;AAAA;;AACH,QAAMC,KAAK,GAAGP,qBAAqB,CAAC,CAAD,CAAnC;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAuCf,OAAO,CAAC,MAAM;AACzD,QAAIC,UAAU,IAAIC,IAAlB,EAAwB;AACtB,YAAM;AAAEW,QAAAA;AAAF,UAAcZ,UAApB;AACA,YAAM;AAAEa,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAA8Bb,IAApC;AACA,aAAO;AAAEW,QAAAA,OAAF;AAAWC,QAAAA,WAAX;AAAwBC,QAAAA;AAAxB,OAAP;AACD,KAJD,MAIO;AACLC,MAAAA,OAAO,CAACC,IAAR,CACE,iFADF;AAGA,aAAO;AACLJ,QAAAA,OAAO,EAAEN,SADJ;AAELO,QAAAA,WAAW,EAAEP,SAFR;AAGLQ,QAAAA,UAAU,EAAER;AAHP,OAAP;AAKD;AACF,GAfmD,EAejD,EAfiD,CAApD;AAiBAR,EAAAA,SAAS,CAAC,MAAM;AACd,QACEe,WAAW,KAAKP,SAAhB,IACAM,OAAO,KAAKN,SADZ,IAEAQ,UAAU,KAAKR,SAHjB,EAIE;AACA;AACA,YAAMW,QAAQ,GAAGJ,WAAW,CAC1B,MAAM;AACJ;;AACAD,QAAAA,OAAO,CAACH,EAAD,CAAP;AACD,OAJyB,EAK1B,CAACF,KAAD,EAAQ,GAAGG,MAAX,CAL0B,EAM1B,CAACC,KAAD,CAN0B,CAA5B,CAFA,CAUA;;AACA,aAAO,MAAM;AACX,YAAIG,UAAU,IAAIG,QAAQ,KAAKX,SAA/B,EAA0C;AACxCQ,UAAAA,UAAU,CAACG,QAAD,CAAV;AACD;AACF,OAJD;AAKD;;AACD,WAAO,MAAM,CAAE,CAAf,CAtBc,CAuBd;AACD,GAxBQ,EAwBN,CAACN,KAAD,EAAQC,OAAR,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0CP,KAA1C,EAAiD,GAAGG,MAApD,CAxBM,CAAT;AAyBD,CAhDM","sourcesContent":["/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable @typescript-eslint/consistent-type-imports */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { useEffect, useMemo } from \"react\";\n\n// @ts-ignore\nlet Reanimated: typeof import(\"react-native-reanimated\") | undefined;\nlet Core: // @ts-ignore\ntypeof import(\"react-native-reanimated/lib/reanimated2/core\") | undefined;\n\ntry {\n  Reanimated = require(\"react-native-reanimated\");\n  Core = require(\"react-native-reanimated/lib/reanimated2/core\");\n} catch (e) {\n  // Ignore\n}\n\ntype SharedValueTypeWrapper<T = number> = {\n  value: T;\n};\n\nconst useSharedValueWrapper =\n  Reanimated?.useSharedValue === undefined\n    ? (value: number) => useMemo(() => ({ value }), [value])\n    : Reanimated.useSharedValue;\n\n/**\n * Connects a shared value from reanimated to a SkiaView or Canvas\n * so whenever the shared value changes the SkiaView will redraw.\n * @param cb Callback that will be called whenever the shared value changes.\n * @param values One or more shared values to listen for.\n */\nexport const useSharedValueEffect = <T = number>(\n  cb: () => void,\n  value: SharedValueTypeWrapper<T>,\n  ...values: SharedValueTypeWrapper<T>[]\n) => {\n  const input = useSharedValueWrapper(0);\n  const { runOnJS, startMapper, stopMapper } = useMemo(() => {\n    if (Reanimated && Core) {\n      const { runOnJS } = Reanimated;\n      const { startMapper, stopMapper } = Core;\n      return { runOnJS, startMapper, stopMapper };\n    } else {\n      console.warn(\n        \"Reanimated was not found and the useSharedValueEffect hook will have no effect.\"\n      );\n      return {\n        runOnJS: undefined,\n        startMapper: undefined,\n        stopMapper: undefined,\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      startMapper !== undefined &&\n      runOnJS !== undefined &&\n      stopMapper !== undefined\n    ) {\n      // Start a mapper in Reanimated\n      const mapperId = startMapper(\n        () => {\n          \"worklet\";\n          runOnJS(cb)();\n        },\n        [value, ...values],\n        [input]\n      );\n      // Return unregistering the mapper\n      return () => {\n        if (stopMapper && mapperId !== undefined) {\n          stopMapper(mapperId);\n        }\n      };\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [input, runOnJS, startMapper, stopMapper, value, ...values]);\n};\n"]}