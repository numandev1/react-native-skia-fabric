{"version":3,"sources":["decay.ts"],"names":["VELOCITY_EPS","SLOPE_FACTOR","decay","now","state","config","lastTimestamp","startTimestamp","initialVelocity","current","velocity","nextState","deltaTime","Math","min","v","exp","deceleration","velocityFactor","clamp","finished","abs"],"mappings":";;;;;;AAEA,MAAMA,YAAY,GAAG,CAArB;AACA,MAAMC,YAAY,GAAG,GAArB;;AAEO,MAAMC,KAAK,GAAG,CACnBC,GADmB,EAEnBC,KAFmB,EAGnBC,MAHmB,KAIJ;AACf,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,cAAjB;AAAiCC,IAAAA,eAAjC;AAAkDC,IAAAA,OAAlD;AAA2DC,IAAAA;AAA3D,MACJN,KADF;AAEA,QAAMO,SAAS,GAAG,EAAE,GAAGP;AAAL,GAAlB;AACA,QAAMQ,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASX,GAAG,GAAGG,aAAf,EAA8B,EAA9B,CAAlB;AACA,QAAMS,CAAC,GACLL,QAAQ,GACRG,IAAI,CAACG,GAAL,CACE,EAAE,IAAIX,MAAM,CAACY,YAAb,KAA8Bd,GAAG,GAAGI,cAApC,IAAsDN,YADxD,CAFF;AAKAU,EAAAA,SAAS,CAACF,OAAV,GAAoBA,OAAO,GAAIM,CAAC,GAAGV,MAAM,CAACa,cAAX,GAA4BN,SAA7B,GAA0C,IAAxE,CAVe,CAU+D;;AAC9ED,EAAAA,SAAS,CAACD,QAAV,GAAqBK,CAArB;AACAJ,EAAAA,SAAS,CAACL,aAAV,GAA0BH,GAA1B;;AAEA,MAAIE,MAAM,CAACc,KAAX,EAAkB;AAChB,QAAIX,eAAe,GAAG,CAAlB,IAAuBG,SAAS,CAACF,OAAV,IAAqBJ,MAAM,CAACc,KAAP,CAAa,CAAb,CAAhD,EAAiE;AAC/DR,MAAAA,SAAS,CAACF,OAAV,GAAoBJ,MAAM,CAACc,KAAP,CAAa,CAAb,CAApB;AACAR,MAAAA,SAAS,CAACS,QAAV,GAAqB,IAArB;AACD,KAHD,MAGO,IAAIZ,eAAe,GAAG,CAAlB,IAAuBG,SAAS,CAACF,OAAV,IAAqBJ,MAAM,CAACc,KAAP,CAAa,CAAb,CAAhD,EAAiE;AACtER,MAAAA,SAAS,CAACF,OAAV,GAAoBJ,MAAM,CAACc,KAAP,CAAa,CAAb,CAApB;AACAR,MAAAA,SAAS,CAACS,QAAV,GAAqB,IAArB;AACD;AACF;;AACDT,EAAAA,SAAS,CAACS,QAAV,GAAqBP,IAAI,CAACQ,GAAL,CAASN,CAAT,IAAcf,YAAnC;AACA,SAAOW,SAAP;AACD,CA7BM","sourcesContent":["import type { DecayState, DefaultDecayConfig } from \"./types\";\n\nconst VELOCITY_EPS = 1;\nconst SLOPE_FACTOR = 0.1;\n\nexport const decay = (\n  now: number,\n  state: DecayState,\n  config: DefaultDecayConfig\n): DecayState => {\n  const { lastTimestamp, startTimestamp, initialVelocity, current, velocity } =\n    state;\n  const nextState = { ...state };\n  const deltaTime = Math.min(now - lastTimestamp, 64);\n  const v =\n    velocity *\n    Math.exp(\n      -(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR\n    );\n  nextState.current = current + (v * config.velocityFactor * deltaTime) / 1000; // /1000 because time is in ms not in s\n  nextState.velocity = v;\n  nextState.lastTimestamp = now;\n\n  if (config.clamp) {\n    if (initialVelocity < 0 && nextState.current <= config.clamp[0]) {\n      nextState.current = config.clamp[0];\n      nextState.finished = true;\n    } else if (initialVelocity > 0 && nextState.current >= config.clamp[1]) {\n      nextState.current = config.clamp[1];\n      nextState.finished = true;\n    }\n  }\n  nextState.finished = Math.abs(v) < VELOCITY_EPS;\n  return nextState;\n};\n"]}