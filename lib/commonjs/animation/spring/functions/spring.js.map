{"version":3,"sources":["spring.ts"],"names":["createSpringEasing","params","config","mass","stiffness","damping","velocity","getSpringEasing","initialVelocity","state","w0","Math","sqrt","zeta","wd","a","b","update","t","duration","progress","exp","cos","sin","getDurationMs","frame","elapsed","rest","durationMs","easing"],"mappings":"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","sourcesContent":["import type { SpringConfig } from \"../types\";\nimport type { TimingConfig } from \"../../types\";\n\n/**\n * @description Returns a cached jsContext function for a spring with duration\n * @param mass The mass of the spring\n * @param stiffness The stiffness of the spring\n * @param damping Spring damping\n * @param velocity The initial velocity\n */\nexport const createSpringEasing = (\n  params: Partial<SpringConfig>\n): TimingConfig => {\n  const config = {\n    mass: 1,\n    stiffness: 100,\n    damping: 10,\n    velocity: 0,\n    ...params,\n  };\n  config.velocity /= 100;\n  return getSpringEasing(config);\n};\n\nconst getSpringEasing = (config: Required<SpringConfig>) => {\n  const { stiffness, mass, damping, velocity: initialVelocity } = config;\n  // Setup spring state\n  const state = {\n    w0: Math.sqrt(stiffness / mass),\n    zeta: 0,\n    wd: 0,\n    a: 1,\n    b: 0,\n  };\n  state.zeta = damping / (2 * Math.sqrt(stiffness * mass));\n  state.wd =\n    state.zeta < 1 ? state.w0 * Math.sqrt(1 - state.zeta * state.zeta) : 0;\n  state.a = 1;\n  state.b =\n    state.zeta < 1\n      ? (state.zeta * state.w0 + -initialVelocity) / state.wd\n      : -initialVelocity + state.w0;\n\n  const update = (t: number, duration?: number) => {\n    let progress = duration ? (duration * t) / 1000 : t;\n    if (state.zeta < 1) {\n      progress =\n        Math.exp(-progress * state.zeta * state.w0) *\n        (state.a * Math.cos(state.wd * progress) +\n          state.b * Math.sin(state.wd * progress));\n    } else {\n      progress =\n        (state.a + state.b * progress) * Math.exp(-progress * state.w0);\n    }\n    if (t === 0 || t === 1) {\n      return t;\n    }\n    return 1 - progress;\n  };\n\n  const getDurationMs = () => {\n    var frame = 1 / 6;\n    var elapsed = 0;\n    var rest = 0;\n    while (true) {\n      elapsed += frame;\n      if (update(elapsed) === 1) {\n        rest++;\n        if (rest >= 6) {\n          break;\n        }\n      } else {\n        rest = 0;\n      }\n    }\n    var durationMs = elapsed * frame * 1000;\n    return durationMs + 1000;\n  };\n\n  const durationMs = getDurationMs();\n\n  return {\n    easing: (t: number) => update(t, durationMs),\n    duration: durationMs,\n  };\n};\n"]}