{"version":3,"sources":["Shader.ts"],"names":["isShader","obj","__typename__","isVector","x","undefined","y","processValue","value","processUniforms","source","uniforms","builder","processed","Array","getUniformCount","fill","flatMap","_","i","name","getUniformName","Error","result","isArray","setUniform","names","Object","keys","length","usedUniforms","map","unusedUniform","indexOf","filter","n","console","warn","join"],"mappings":";;;;;;;AAIO,MAAMA,QAAQ,GAAIC,GAAD,IACtBA,GAAG,KAAK,IAAR,IAAgBA,GAAG,CAACC,YAAJ,KAAqB,QADhC;;;;AAaP,MAAMC,QAAQ,GAAIF,GAAD,IACf;AACA;AACCA,GAAD,CAAaG,CAAb,KAAmBC,SAAnB,IAAiCJ,GAAD,CAAaK,CAAb,KAAmBD,SAHrD;;AAKA,MAAME,YAAY,GAAIC,KAAD,IAAqD;AACxE,MAAIL,QAAQ,CAACK,KAAD,CAAZ,EAAqB;AACnB,WAAO,CAACA,KAAK,CAACJ,CAAP,EAAUI,KAAK,CAACF,CAAhB,CAAP;AACD;;AACD,SAAOE,KAAP;AACD,CALD;;AAOO,MAAMC,eAAe,GAAG,CAC7BC,MAD6B,EAE7BC,QAF6B,EAG7BC,OAH6B,KAI1B;AACH,QAAMC,SAAS,GAAG,IAAIC,KAAJ,CAAUJ,MAAM,CAACK,eAAP,EAAV,EACfC,IADe,CACV,CADU,EAEfC,OAFe,CAEP,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjB,UAAMC,IAAI,GAAGV,MAAM,CAACW,cAAP,CAAsBF,CAAtB,CAAb;AACA,UAAMX,KAAK,GAAGG,QAAQ,CAACS,IAAD,CAAtB;;AACA,QAAIZ,KAAK,KAAKH,SAAd,EAAyB;AACvB,YAAM,IAAIiB,KAAJ,CAAW,kCAAiCF,IAAK,EAAjD,CAAN;AACD;;AACD,UAAMG,MAAM,GAAGT,KAAK,CAACU,OAAN,CAAchB,KAAd,IACXA,KAAK,CAACS,OAAN,CAAcV,YAAd,CADW,GAEXA,YAAY,CAACC,KAAD,CAFhB;AAGAI,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEa,UAAT,CAAoBL,IAApB,EAA0B,OAAOG,MAAP,KAAkB,QAAlB,GAA6B,CAACA,MAAD,CAA7B,GAAwCA,MAAlE;AACA,WAAOA,MAAP;AACD,GAbe,CAAlB;AAcA,QAAMG,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYjB,QAAZ,CAAd;;AACA,MAAIe,KAAK,CAACG,MAAN,GAAenB,MAAM,CAACK,eAAP,EAAnB,EAA6C;AAC3C,UAAMe,YAAY,GAAG,IAAIhB,KAAJ,CAAUJ,MAAM,CAACK,eAAP,EAAV,EAClBC,IADkB,CACb,CADa,EAElBe,GAFkB,CAEd,CAACb,CAAD,EAAIC,CAAJ,KAAUT,MAAM,CAACW,cAAP,CAAsBF,CAAtB,CAFI,CAArB;AAGA,UAAMa,aAAa,GAAGN,KAAK,CACxBK,GADmB,CACdX,IAAD,IAAU;AACb,UAAIU,YAAY,CAACG,OAAb,CAAqBb,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrC,eAAOA,IAAP;AACD;;AACD,aAAO,IAAP;AACD,KANmB,EAOnBc,MAPmB,CAOXC,CAAD,IAAOA,CAAC,KAAK,IAPD,CAAtB;AAQAC,IAAAA,OAAO,CAACC,IAAR,CAAa,oCAAoCL,aAAa,CAACM,IAAd,CAAmB,IAAnB,CAAjD;AACD;;AACD,SAAOzB,SAAP;AACD,CAnCM","sourcesContent":["import type { SkJSIInstance } from \"../JsiInstance\";\nimport type { Vector } from \"../Point\";\nimport type { SkRuntimeEffect, SkRuntimeShaderBuilder } from \"../RuntimeEffect\";\n\nexport const isShader = (obj: SkJSIInstance<string> | null): obj is SkShader =>\n  obj !== null && obj.__typename__ === \"Shader\";\n\nexport type SkShader = SkJSIInstance<\"Shader\">;\n\nexport type UniformValue = number | Vector | readonly number[];\n\nexport type Uniform = UniformValue | readonly UniformValue[];\n\nexport interface Uniforms {\n  [name: string]: Uniform;\n}\n\nconst isVector = (obj: unknown): obj is Vector =>\n  // We have an issue to check property existence on JSI backed instances\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (obj as any).x !== undefined && (obj as any).y !== undefined;\n\nconst processValue = (value: UniformValue): number | readonly number[] => {\n  if (isVector(value)) {\n    return [value.x, value.y];\n  }\n  return value;\n};\n\nexport const processUniforms = (\n  source: SkRuntimeEffect,\n  uniforms: Uniforms,\n  builder?: SkRuntimeShaderBuilder\n) => {\n  const processed = new Array(source.getUniformCount())\n    .fill(0)\n    .flatMap((_, i) => {\n      const name = source.getUniformName(i);\n      const value = uniforms[name];\n      if (value === undefined) {\n        throw new Error(`No value specified for uniform ${name}`);\n      }\n      const result = Array.isArray(value)\n        ? value.flatMap(processValue)\n        : processValue(value as UniformValue);\n      builder?.setUniform(name, typeof result === \"number\" ? [result] : result);\n      return result;\n    });\n  const names = Object.keys(uniforms);\n  if (names.length > source.getUniformCount()) {\n    const usedUniforms = new Array(source.getUniformCount())\n      .fill(0)\n      .map((_, i) => source.getUniformName(i));\n    const unusedUniform = names\n      .map((name) => {\n        if (usedUniforms.indexOf(name) === -1) {\n          return name;\n        }\n        return null;\n      })\n      .filter((n) => n !== null);\n    console.warn(\"Unused uniforms were provided: \" + unusedUniform.join(\", \"));\n  }\n  return processed;\n};\n"]}