{"version":3,"sources":["JsiSkSurfaceFactory.ts"],"names":["JsiSkSurfaceFactory","Host","constructor","CanvasKit","Make","width","height","surface","MakeSurface","Error","JsiSkSurface"],"mappings":";;;;;;;AAIA;;AACA;;AAEO,MAAMA,mBAAN,SAAkCC,UAAlC,CAAiE;AACtEC,EAAAA,WAAW,CAACC,SAAD,EAAuB;AAChC,UAAMA,SAAN;AACD;;AAEDC,EAAAA,IAAI,CAACC,KAAD,EAAgBC,MAAhB,EAAgC;AAClC,UAAMC,OAAO,GAAG,KAAKJ,SAAL,CAAeK,WAAf,CAA2BH,KAA3B,EAAkCC,MAAlC,CAAhB;;AACA,QAAI,CAACC,OAAL,EAAc;AACZ,YAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,WAAO,IAAIC,0BAAJ,CAAiB,KAAKP,SAAtB,EAAiCI,OAAjC,CAAP;AACD;;AAXqE","sourcesContent":["import type { CanvasKit } from \"canvaskit-wasm\";\n\nimport type { SurfaceFactory } from \"../types\";\n\nimport { Host } from \"./Host\";\nimport { JsiSkSurface } from \"./JsiSkSurface\";\n\nexport class JsiSkSurfaceFactory extends Host implements SurfaceFactory {\n  constructor(CanvasKit: CanvasKit) {\n    super(CanvasKit);\n  }\n\n  Make(width: number, height: number) {\n    const surface = this.CanvasKit.MakeSurface(width, height);\n    if (!surface) {\n      throw new Error(\"Could not create surface\");\n    }\n    return new JsiSkSurface(this.CanvasKit, surface);\n  }\n}\n"]}