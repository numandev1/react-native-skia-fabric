{"version":3,"sources":["RNSkClockValue.ts"],"names":["RNSkClockState","RNSkClockValue","RNSkReadonlyValue","constructor","raf","NotStarted","_","_state","Running","now","Date","deltaFromStart","_start","tick","_raf","notifyUpdate","update","value","start","_stop","timeSinceStop","stop","Stopped"],"mappings":";;;;;;;AAEA;;;;IAEKA,c;;WAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;GAAAA,c,KAAAA,c;;AAME,MAAMC,cAAN,SACGC,oCADH,CAGP;AACEC,EAAAA,WAAW,CAACC,GAAD,EAAoD;AAC7D,UAAM,CAAN;;AAD6D;;AAAA;;AAAA;;AAAA,oCAS9BJ,cAAc,CAACK,UATe;;AAAA,0CAWvCC,CAAD,IAAe;AACpC,UAAI,KAAKC,MAAL,KAAgBP,cAAc,CAACQ,OAAnC,EAA4C;AAC1C,cAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,cAAME,cAAc,GAAGF,GAAG,GAAG,KAAKG,MAAlC;AACA,aAAKC,IAAL,CAAUF,cAAV;;AACA,aAAKG,IAAL,CAAU,KAAKC,YAAf;AACD;AACF,KAlB8D;;AAE7D,SAAKD,IAAL,GAAYV,GAAZ;AACA,SAAKY,MAAL,CAAY,CAAZ;AACD;;AAgBSH,EAAAA,IAAI,CAACI,KAAD,EAAgB;AAC5B,SAAKD,MAAL,CAAYC,KAAZ;AACD;;AAEMC,EAAAA,KAAK,GAAG;AACb,QAAI,KAAKX,MAAL,KAAgBP,cAAc,CAACK,UAAnC,EAA+C;AAC7C,WAAKO,MAAL,GAAcF,IAAI,CAACD,GAAL,EAAd;AACA,WAAKU,KAAL,GAAa,KAAKP,MAAlB;AACD,KAJY,CAKb;;;AACA,UAAMQ,aAAa,GAAGV,IAAI,CAACD,GAAL,KAAa,KAAKU,KAAxC;;AACA,SAAKP,MAAL,IAAgBQ,aAAhB;AAEA,SAAKb,MAAL,GAAcP,cAAc,CAACQ,OAA7B;;AACA,SAAKM,IAAL,CAAU,KAAKC,YAAf;AACD;;AAEMM,EAAAA,IAAI,GAAG;AACZ,QAAI,KAAKd,MAAL,KAAgBP,cAAc,CAACQ,OAAnC,EAA4C;AAC1C,WAAKD,MAAL,GAAcP,cAAc,CAACsB,OAA7B;AACA,WAAKH,KAAL,GAAaT,IAAI,CAACD,GAAL,EAAb;AACD;AACF;;AA3CH","sourcesContent":["import type { SkiaClockValue } from \"../types\";\n\nimport { RNSkReadonlyValue } from \"./RNSkReadonlyValue\";\n\nenum RNSkClockState {\n  NotStarted = 0,\n  Running = 1,\n  Stopped = 2,\n}\n\nexport class RNSkClockValue\n  extends RNSkReadonlyValue<number>\n  implements SkiaClockValue\n{\n  constructor(raf: (callback: (time: number) => void) => number) {\n    super(0);\n    this._raf = raf;\n    this.update(0);\n  }\n\n  private _raf: (callback: (time: number) => void) => number;\n  private _start: number | undefined;\n  private _stop: number | undefined;\n  private _state: RNSkClockState = RNSkClockState.NotStarted;\n\n  private notifyUpdate = (_: number) => {\n    if (this._state === RNSkClockState.Running) {\n      const now = Date.now();\n      const deltaFromStart = now - this._start!;\n      this.tick(deltaFromStart);\n      this._raf(this.notifyUpdate);\n    }\n  };\n\n  protected tick(value: number) {\n    this.update(value);\n  }\n\n  public start() {\n    if (this._state === RNSkClockState.NotStarted) {\n      this._start = Date.now();\n      this._stop = this._start;\n    }\n    // Subtract pause time from start\n    const timeSinceStop = Date.now() - this._stop!;\n    this._start! += timeSinceStop;\n\n    this._state = RNSkClockState.Running;\n    this._raf(this.notifyUpdate);\n  }\n\n  public stop() {\n    if (this._state === RNSkClockState.Running) {\n      this._state = RNSkClockState.Stopped;\n      this._stop = Date.now();\n    }\n  }\n}\n"]}