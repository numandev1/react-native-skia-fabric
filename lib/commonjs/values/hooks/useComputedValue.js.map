{"version":3,"sources":["useComputedValue.ts"],"names":["useComputedValue","cb","values","value","ValueApi","createComputedValue","filter","isValue","__invalidate"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,gBAAgB,GAAG,CAAIC,EAAJ,EAAiBC,MAAjB,KAAuC;AACrE,QAAMC,KAAK,GAAG,oBACZ,MAAMC,cAASC,mBAAT,CAAgCJ,EAAhC,EAAoCC,MAAM,CAACI,MAAP,CAAcC,mBAAd,CAApC,CADM,EAEZ;AACAL,EAAAA,MAHY,CAAd;AAKA,wBAAU,MAAM,MAAMC,KAAK,CAACK,YAAN,EAAtB,EAA4C,CAACL,KAAD,CAA5C;AACA,SAAOA,KAAP;AACD,CARM","sourcesContent":["import { useEffect, useMemo } from \"react\";\n\nimport { ValueApi } from \"../api\";\nimport { isValue } from \"../../renderer/processors/Animations\";\n\n/**\n * Creates a new computed value - a value that will calculate its value depending\n * on other values.\n * @param cb Callback to calculate new value\n * @param values Dependant values\n * @returns A readonly value\n */\nexport const useComputedValue = <R>(cb: () => R, values: unknown[]) => {\n  const value = useMemo(\n    () => ValueApi.createComputedValue<R>(cb, values.filter(isValue)),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    values\n  );\n  useEffect(() => () => value.__invalidate(), [value]);\n  return value;\n};\n"]}