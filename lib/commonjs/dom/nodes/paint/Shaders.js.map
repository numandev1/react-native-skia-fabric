{"version":3,"sources":["Shaders.ts"],"names":["ShaderDeclaration","JsiDeclarationNode","constructor","ctx","type","props","DeclarationType","Shader","ShaderNode","NodeType","materialize","source","uniforms","transform","m3","Skia","Matrix","makeShaderWithChildren","children","filter","child","isShader","map","ImageShaderNode","ImageShader","fit","image","tx","ty","fm","mm","imageShaderProps","rct","rects","x","y","width","height","src","dst","lm","makeShaderOptions","TileMode","FilterMode","MipmapMode","ColorNode","ColorShader","color","MakeColor","TurbulenceNode","Turbulence","freqX","freqY","octaves","seed","tileWidth","tileHeight","MakeTurbulence","FractalNoiseNode","FractalNoise","MakeFractalNoise","LinearGradientNode","LinearGradient","start","end","colors","positions","mode","localMatrix","flags","MakeLinearGradient","RadialGradientNode","RadialGradient","c","r","MakeRadialGradient","SweepGradientNode","SweepGradient","MakeSweepGradient","TwoPointConicalGradientNode","TwoPointConicalGradient","startR","endR","MakeTwoPointConicalGradient"],"mappings":"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","sourcesContent":["import {\n  processUniforms,\n  FilterMode,\n  MipmapMode,\n  TileMode,\n} from \"../../../skia/types\";\nimport type { SkShader } from \"../../../skia/types\";\nimport type { NodeContext } from \"../Node\";\nimport { JsiDeclarationNode } from \"../Node\";\nimport type {\n  ColorProps,\n  FractalNoiseProps,\n  ImageShaderProps,\n  LinearGradientProps,\n  RadialGradientProps,\n  ShaderProps,\n  SweepGradientProps,\n  TurbulenceProps,\n  TwoPointConicalGradientProps,\n} from \"../../types\";\nimport { DeclarationType, NodeType } from \"../../types\";\nimport { processColor } from \"../datatypes/Color\";\nimport {\n  enumKey,\n  fitRects,\n  getRect,\n  processGradientProps,\n  processTransformProps,\n  rect2rect,\n} from \"../datatypes\";\n\nexport abstract class ShaderDeclaration<P> extends JsiDeclarationNode<\n  P,\n  SkShader\n> {\n  constructor(ctx: NodeContext, type: NodeType, props: P) {\n    super(ctx, DeclarationType.Shader, type, props);\n  }\n}\n\nexport class ShaderNode extends ShaderDeclaration<ShaderProps> {\n  constructor(ctx: NodeContext, props: ShaderProps) {\n    super(ctx, NodeType.Shader, props);\n  }\n\n  materialize() {\n    const { source, uniforms, ...transform } = this.props;\n    const m3 = this.Skia.Matrix();\n    processTransformProps(m3, transform);\n    return source.makeShaderWithChildren(\n      processUniforms(source, uniforms),\n      this.children()\n        .filter(\n          (child): child is JsiDeclarationNode<unknown, SkShader> =>\n            child instanceof JsiDeclarationNode && child.isShader()\n        )\n        .map((child) => child.materialize()),\n      m3\n    );\n  }\n}\n\nexport class ImageShaderNode extends ShaderDeclaration<ImageShaderProps> {\n  constructor(ctx: NodeContext, props: ImageShaderProps) {\n    super(ctx, NodeType.ImageShader, props);\n  }\n\n  materialize() {\n    const { fit, image, tx, ty, fm, mm, ...imageShaderProps } = this.props;\n    const rct = getRect(this.Skia, imageShaderProps);\n    if (rct) {\n      const rects = fitRects(\n        fit,\n        { x: 0, y: 0, width: image.width(), height: image.height() },\n        rct\n      );\n      const m3 = rect2rect(rects.src, rects.dst);\n      imageShaderProps.transform = [\n        ...(imageShaderProps.transform ?? []),\n        ...m3,\n      ];\n    }\n    const lm = this.Skia.Matrix();\n    processTransformProps(lm, imageShaderProps);\n    return image.makeShaderOptions(\n      TileMode[enumKey(tx)],\n      TileMode[enumKey(ty)],\n      FilterMode[enumKey(fm)],\n      MipmapMode[enumKey(mm)],\n      lm\n    );\n  }\n}\n\nexport class ColorNode extends ShaderDeclaration<ColorProps> {\n  constructor(ctx: NodeContext, props: ColorProps) {\n    super(ctx, NodeType.ColorShader, props);\n  }\n\n  materialize() {\n    const { color } = this.props;\n    return this.Skia.Shader.MakeColor(processColor(this.Skia, color, 1));\n  }\n}\n\nexport class TurbulenceNode extends ShaderDeclaration<TurbulenceProps> {\n  constructor(ctx: NodeContext, props: TurbulenceProps) {\n    super(ctx, NodeType.Turbulence, props);\n  }\n\n  materialize() {\n    const { freqX, freqY, octaves, seed, tileWidth, tileHeight } = this.props;\n    return this.Skia.Shader.MakeTurbulence(\n      freqX,\n      freqY,\n      octaves,\n      seed,\n      tileWidth,\n      tileHeight\n    );\n  }\n}\n\nexport class FractalNoiseNode extends ShaderDeclaration<FractalNoiseProps> {\n  constructor(ctx: NodeContext, props: FractalNoiseProps) {\n    super(ctx, NodeType.FractalNoise, props);\n  }\n\n  materialize() {\n    const { freqX, freqY, octaves, seed, tileWidth, tileHeight } = this.props;\n    return this.Skia.Shader.MakeFractalNoise(\n      freqX,\n      freqY,\n      octaves,\n      seed,\n      tileWidth,\n      tileHeight\n    );\n  }\n}\n\nexport class LinearGradientNode extends ShaderDeclaration<LinearGradientProps> {\n  constructor(ctx: NodeContext, props: LinearGradientProps) {\n    super(ctx, NodeType.LinearGradient, props);\n  }\n\n  materialize() {\n    const { start, end } = this.props;\n    const { colors, positions, mode, localMatrix, flags } =\n      processGradientProps(this.Skia, this.props);\n    return this.Skia.Shader.MakeLinearGradient(\n      start,\n      end,\n      colors,\n      positions ?? null,\n      mode,\n      localMatrix,\n      flags\n    );\n  }\n}\n\nexport class RadialGradientNode extends ShaderDeclaration<RadialGradientProps> {\n  constructor(ctx: NodeContext, props: RadialGradientProps) {\n    super(ctx, NodeType.RadialGradient, props);\n  }\n\n  materialize() {\n    const { c, r } = this.props;\n    const { colors, positions, mode, localMatrix, flags } =\n      processGradientProps(this.Skia, this.props);\n    return this.Skia.Shader.MakeRadialGradient(\n      c,\n      r,\n      colors,\n      positions,\n      mode,\n      localMatrix,\n      flags\n    );\n  }\n}\n\nexport class SweepGradientNode extends ShaderDeclaration<SweepGradientProps> {\n  constructor(ctx: NodeContext, props: SweepGradientProps) {\n    super(ctx, NodeType.SweepGradient, props);\n  }\n\n  materialize() {\n    const { c, start, end } = this.props;\n    const { colors, positions, mode, localMatrix, flags } =\n      processGradientProps(this.Skia, this.props);\n    return this.Skia.Shader.MakeSweepGradient(\n      c.x,\n      c.y,\n      colors,\n      positions,\n      mode,\n      localMatrix,\n      flags,\n      start,\n      end\n    );\n  }\n}\n\nexport class TwoPointConicalGradientNode extends ShaderDeclaration<TwoPointConicalGradientProps> {\n  constructor(ctx: NodeContext, props: TwoPointConicalGradientProps) {\n    super(ctx, NodeType.TwoPointConicalGradient, props);\n  }\n\n  materialize() {\n    const { startR, endR, start, end } = this.props;\n    const { colors, positions, mode, localMatrix, flags } =\n      processGradientProps(this.Skia, this.props);\n    return this.Skia.Shader.MakeTwoPointConicalGradient(\n      start,\n      startR,\n      end,\n      endR,\n      colors,\n      positions,\n      mode,\n      localMatrix,\n      flags\n    );\n  }\n}\n"]}