{"version":3,"sources":["BlendNode.ts"],"names":["BlendNode","JsiDeclarationNode","constructor","ctx","props","DeclarationType","ImageFilter","NodeType","Blend","checkChild","child","_children","length","declarationType","Shader","addChild","Error","type","insertChildBefore","before","ImageFilterDeclaration","ShaderDeclaration","materialize","Skia","blend","BlendMode","mode","reverse","reduce","inner","outer","MakeBlend"],"mappings":";;;;;;;AAEA;;AACA;;AAEA;;AAEA;;AAEA;;AACA;;AAEO,MAAMA,SAAN,SAAwBC,wBAAxB,CAGL;AACAC,EAAAA,WAAW,CAACC,GAAD,EAAmBC,KAAnB,EAAsC;AAC/C,UAAMD,GAAN,EAAWE,0BAAgBC,WAA3B,EAAwCC,mBAASC,KAAjD,EAAwDJ,KAAxD;AACD;;AAEOK,EAAAA,UAAU,CAChBC,KADgB,EAEhB;AACA,QAAI,KAAKC,SAAL,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,UAAIF,KAAK,CAACG,eAAN,KAA0BR,0BAAgBC,WAA9C,EAA2D;AACzD,aAAKO,eAAL,GAAuBR,0BAAgBC,WAAvC;AACD,OAFD,MAEO;AACL,aAAKO,eAAL,GAAuBR,0BAAgBS,MAAvC;AACD;AACF;AACF;;AAEDC,EAAAA,QAAQ,CAACL,KAAD,EAAuB;AAC7B,QACE,EAAEA,KAAK,YAAYT,wBAAnB,KACCS,KAAK,CAACG,eAAN,KAA0BR,0BAAgBS,MAA1C,IACCJ,KAAK,CAACG,eAAN,KAA0BR,0BAAgBC,WAH9C,EAIE;AACA,YAAM,IAAIU,KAAJ,CAAW,4BAA2BN,KAAK,CAACO,IAAK,OAAM,KAAKA,IAAK,EAAjE,CAAN;AACD;;AACD,SAAKR,UAAL,CAAgBC,KAAhB;AACA,UAAMK,QAAN,CAAeL,KAAf;AACD;;AAEDQ,EAAAA,iBAAiB,CAACR,KAAD,EAAuBS,MAAvB,EAAoD;AACnE,QACE,EAAET,KAAK,YAAYU,oCAAnB,KACA,EAAEV,KAAK,YAAYW,0BAAnB,CAFF,EAGE;AACA,YAAM,IAAIL,KAAJ,CAAW,4BAA2BN,KAAK,CAACO,IAAK,OAAM,KAAKA,IAAK,EAAjE,CAAN;AACD;;AACD,SAAKR,UAAL,CAAgBC,KAAhB;AACA,UAAMQ,iBAAN,CAAwBR,KAAxB,EAA+BS,MAA/B;AACD;;AAEDG,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEC,MAAAA;AAAF,QAAW,IAAjB;;AACA,UAAMC,KAAK,GAAGC,iBAAU,wBAAQ,KAAKrB,KAAL,CAAWsB,IAAnB,CAAV,CAAd;;AACA,QAAI,KAAKb,eAAL,KAAyBR,0BAAgBC,WAA7C,EAA0D;AACxD,aAAQ,KAAKK,SAAN,CACJgB,OADI,GAEJC,MAFI,CAEyB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC9C,YAAID,KAAK,KAAK,IAAd,EAAoB;AAClB,iBAAOC,KAAK,CAACR,WAAN,EAAP;AACD;;AACD,eAAOC,IAAI,CAACjB,WAAL,CAAiByB,SAAjB,CAA2BP,KAA3B,EAAkCM,KAAK,CAACR,WAAN,EAAlC,EAAuDO,KAAvD,CAAP;AACD,OAPI,EAOF,IAPE,CAAP;AAQD,KATD,MASO;AACL,aAAQ,KAAKlB,SAAN,CACJgB,OADI,GAEJC,MAFI,CAEoB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzC,YAAID,KAAK,KAAK,IAAd,EAAoB;AAClB,iBAAOC,KAAK,CAACR,WAAN,EAAP;AACD;;AACD,eAAOC,IAAI,CAACT,MAAL,CAAYiB,SAAZ,CAAsBP,KAAtB,EAA6BM,KAAK,CAACR,WAAN,EAA7B,EAAkDO,KAAlD,CAAP;AACD,OAPI,EAOF,IAPE,CAAP;AAQD;AACF;;AA9DD","sourcesContent":["import type { BlendProps } from \"../../types/ImageFilters\";\nimport type { SkShader, SkImageFilter } from \"../../../skia/types\";\nimport { BlendMode } from \"../../../skia/types\";\nimport { DeclarationType, NodeType } from \"../../types/NodeType\";\nimport type { NodeContext } from \"../Node\";\nimport { JsiDeclarationNode } from \"../Node\";\nimport type { Node } from \"../../types\";\nimport { enumKey } from \"../datatypes\";\n\nimport { ImageFilterDeclaration } from \"./ImageFilters\";\nimport { ShaderDeclaration } from \"./Shaders\";\n\nexport class BlendNode extends JsiDeclarationNode<\n  BlendProps,\n  SkShader | SkImageFilter\n> {\n  constructor(ctx: NodeContext, props: BlendProps) {\n    super(ctx, DeclarationType.ImageFilter, NodeType.Blend, props);\n  }\n\n  private checkChild(\n    child: ImageFilterDeclaration<unknown> | ShaderDeclaration<unknown>\n  ) {\n    if (this._children.length > 0) {\n      if (child.declarationType === DeclarationType.ImageFilter) {\n        this.declarationType = DeclarationType.ImageFilter;\n      } else {\n        this.declarationType = DeclarationType.Shader;\n      }\n    }\n  }\n\n  addChild(child: Node<unknown>) {\n    if (\n      !(child instanceof JsiDeclarationNode) ||\n      (child.declarationType !== DeclarationType.Shader &&\n        child.declarationType !== DeclarationType.ImageFilter)\n    ) {\n      throw new Error(`Cannot add child of type ${child.type} to ${this.type}`);\n    }\n    this.checkChild(child);\n    super.addChild(child);\n  }\n\n  insertChildBefore(child: Node<unknown>, before: Node<unknown>): void {\n    if (\n      !(child instanceof ImageFilterDeclaration) ||\n      !(child instanceof ShaderDeclaration)\n    ) {\n      throw new Error(`Cannot add child of type ${child.type} to ${this.type}`);\n    }\n    this.checkChild(child);\n    super.insertChildBefore(child, before);\n  }\n\n  materialize() {\n    const { Skia } = this;\n    const blend = BlendMode[enumKey(this.props.mode)];\n    if (this.declarationType === DeclarationType.ImageFilter) {\n      return (this._children as ImageFilterDeclaration<unknown>[])\n        .reverse()\n        .reduce<SkImageFilter | null>((inner, outer) => {\n          if (inner === null) {\n            return outer.materialize();\n          }\n          return Skia.ImageFilter.MakeBlend(blend, outer.materialize(), inner);\n        }, null) as SkImageFilter;\n    } else {\n      return (this._children as ShaderDeclaration<unknown>[])\n        .reverse()\n        .reduce<SkShader | null>((inner, outer) => {\n          if (inner === null) {\n            return outer.materialize();\n          }\n          return Skia.Shader.MakeBlend(blend, outer.materialize(), inner);\n        }, null) as SkShader;\n    }\n  }\n}\n"]}