{"version":3,"sources":["ImageNode.ts"],"names":["ImageNode","JsiDrawingNode","constructor","ctx","props","NodeType","Image","deriveProps","image","fit","rect","Skia","src","dst","x","y","width","height","draw","canvas","paint","derived","Error","drawImageRect"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAGO,MAAMA,SAAN,SAAwBC,2BAAxB,CAGL;AACAC,EAAAA,WAAW,CAACC,GAAD,EAAmBC,KAAnB,EAAsC;AAC/C,UAAMD,GAAN,EAAWE,gBAASC,KAApB,EAA2BF,KAA3B;AACD;;AAEDG,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAiB,KAAKL,KAA5B;AACA,UAAMM,IAAI,GAAG,4BAAY,KAAKC,IAAjB,EAAuB,KAAKP,KAA5B,CAAb;AACA,UAAM;AAAEQ,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAe,yBACnBJ,GADmB,EAEnB;AACEK,MAAAA,CAAC,EAAE,CADL;AAEEC,MAAAA,CAAC,EAAE,CAFL;AAGEC,MAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,EAHT;AAIEC,MAAAA,MAAM,EAAET,KAAK,CAACS,MAAN;AAJV,KAFmB,EAQnBP,IARmB,CAArB;AAUA,WAAO;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAP;AACD;;AAEDK,EAAAA,IAAI,OAAoC;AAAA,QAAnC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAmC;AACtC,UAAM;AAAEZ,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;;AACA,QAAI,CAAC,KAAKiB,OAAV,EAAmB;AACjB,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,UAAM;AAAEV,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAe,KAAKQ,OAA1B;AACAF,IAAAA,MAAM,CAACI,aAAP,CAAqBf,KAArB,EAA4BI,GAA5B,EAAiCC,GAAjC,EAAsCO,KAAtC;AACD;;AA5BD","sourcesContent":["import type { SkRect } from \"../../../skia/types\";\nimport type { DrawingContext, ImageProps } from \"../../types\";\nimport { NodeType } from \"../../types\";\nimport { fitRects, processRect } from \"../datatypes\";\nimport { JsiDrawingNode } from \"../DrawingNode\";\nimport type { NodeContext } from \"../Node\";\n\nexport class ImageNode extends JsiDrawingNode<\n  ImageProps,\n  { src: SkRect; dst: SkRect }\n> {\n  constructor(ctx: NodeContext, props: ImageProps) {\n    super(ctx, NodeType.Image, props);\n  }\n\n  deriveProps() {\n    const { image, fit } = this.props;\n    const rect = processRect(this.Skia, this.props);\n    const { src, dst } = fitRects(\n      fit,\n      {\n        x: 0,\n        y: 0,\n        width: image.width(),\n        height: image.height(),\n      },\n      rect\n    );\n    return { src, dst };\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    const { image } = this.props;\n    if (!this.derived) {\n      throw new Error(\"ImageNode: src and dst are undefined\");\n    }\n    const { src, dst } = this.derived;\n    canvas.drawImageRect(image, src, dst, paint);\n  }\n}\n"]}