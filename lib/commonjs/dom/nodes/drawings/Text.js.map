{"version":3,"sources":["Text.ts"],"names":["TextNode","JsiDrawingNode","constructor","ctx","props","NodeType","Text","deriveProps","draw","canvas","paint","text","x","y","font","drawText","TextPathNode","TextPath","path","Skia","initialOffset","ids","getGlyphIDs","widths","getGlyphWidths","rsx","meas","ContourMeasureIter","cont","next","dist","i","length","width","substring","px","py","tx","ty","getPosTan","adjustedX","adjustedY","push","RSXform","TextBlob","MakeFromRSXform","derived","Error","drawTextBlob","TextBlobNode","blob","GlyphsNode","Glyphs","glyphs","reduce","acc","glyph","id","pos","positions","drawGlyphs"],"mappings":"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","sourcesContent":["import type { SkRSXform, SkTextBlob, SkPoint } from \"../../../skia/types\";\nimport type {\n  DrawingContext,\n  TextBlobProps,\n  TextPathProps,\n  TextProps,\n} from \"../../types\";\nimport { NodeType } from \"../../types\";\nimport { processPath } from \"../datatypes\";\nimport type { GlyphsProps } from \"../../types/Drawings\";\nimport { JsiDrawingNode } from \"../DrawingNode\";\nimport type { NodeContext } from \"../Node\";\n\nexport class TextNode extends JsiDrawingNode<TextProps, null> {\n  constructor(ctx: NodeContext, props: TextProps) {\n    super(ctx, NodeType.Text, props);\n  }\n\n  protected deriveProps() {\n    return null;\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    const { text, x, y, font } = this.props;\n    canvas.drawText(text, x, y, paint, font);\n  }\n}\n\nexport class TextPathNode extends JsiDrawingNode<TextPathProps, SkTextBlob> {\n  constructor(ctx: NodeContext, props: TextPathProps) {\n    super(ctx, NodeType.TextPath, props);\n  }\n\n  deriveProps() {\n    const path = processPath(this.Skia, this.props.path);\n    const { font, initialOffset } = this.props;\n    let { text } = this.props;\n    const ids = font.getGlyphIDs(text);\n    const widths = font.getGlyphWidths(ids);\n    const rsx: SkRSXform[] = [];\n    const meas = this.Skia.ContourMeasureIter(path, false, 1);\n    let cont = meas.next();\n    let dist = initialOffset;\n    for (let i = 0; i < text.length && cont; i++) {\n      const width = widths[i];\n      dist += width / 2;\n      if (dist > cont.length()) {\n        // jump to next contour\n        cont = meas.next();\n        if (!cont) {\n          // We have come to the end of the path - terminate the string\n          // right here.\n          text = text.substring(0, i);\n          break;\n        }\n        dist = width / 2;\n      }\n      // Gives us the (x, y) coordinates as well as the cos/sin of the tangent\n      // line at that position.\n      const { px, py, tx, ty } = cont.getPosTan(dist);\n      const adjustedX = px - (width / 2) * tx;\n      const adjustedY = py - (width / 2) * ty;\n      rsx.push(this.Skia.RSXform(tx, ty, adjustedX, adjustedY));\n      dist += width / 2;\n    }\n    return this.Skia.TextBlob.MakeFromRSXform(text, rsx, font);\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    if (!this.derived) {\n      throw new Error(\"TextPathNode: blob is null\");\n    }\n    canvas.drawTextBlob(this.derived, 0, 0, paint);\n  }\n}\n\nexport class TextBlobNode extends JsiDrawingNode<TextBlobProps, null> {\n  constructor(ctx: NodeContext, props: TextBlobProps) {\n    super(ctx, NodeType.TextBlob, props);\n  }\n\n  protected deriveProps() {\n    return null;\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    const { blob, x, y } = this.props;\n    canvas.drawTextBlob(blob, x, y, paint);\n  }\n}\n\ninterface ProcessedGlyphs {\n  glyphs: number[];\n  positions: SkPoint[];\n}\n\nexport class GlyphsNode extends JsiDrawingNode<GlyphsProps, ProcessedGlyphs> {\n  constructor(ctx: NodeContext, props: GlyphsProps) {\n    super(ctx, NodeType.Glyphs, props);\n  }\n\n  deriveProps() {\n    return this.props.glyphs.reduce<ProcessedGlyphs>(\n      (acc, glyph) => {\n        const { id, pos } = glyph;\n        acc.glyphs.push(id);\n        acc.positions.push(pos);\n        return acc;\n      },\n      { glyphs: [], positions: [] }\n    );\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    if (!this.derived) {\n      throw new Error(\"GlyphsNode: processedGlyphs is null\");\n    }\n    const { glyphs, positions } = this.derived;\n    const { x, y, font } = this.props;\n    canvas.drawGlyphs(glyphs, positions, x, y, font, paint);\n  }\n}\n"]}