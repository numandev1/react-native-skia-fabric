{"version":3,"sources":["Box.ts"],"names":["inflate","Skia","box","dx","dy","tx","ty","RRectXY","XYWHRect","rect","x","y","width","height","rx","ry","deflate","BoxShadowNode","JsiDeclarationNode","constructor","ctx","props","DeclarationType","Unknown","NodeType","Box","materialize","BoxNode","JsiRenderNode","renderNode","canvas","paint","opacity","defaultBox","shadows","_children","map","node","filter","n","shadow","inner","color","blur","spread","lPaint","Paint","setColor","setMaskFilter","MaskFilter","MakeBlur","BlurStyle","Normal","drawRRect","delta","Point","Math","abs","save","clipRRect","ClipOp","Intersect","outer","drawDRRect","restore"],"mappings":"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","sourcesContent":["import type { SkRRect, Skia } from \"../../../skia/types\";\nimport { BlurStyle, ClipOp, isRRect } from \"../../../skia/types\";\nimport type { DrawingContext } from \"../../types\";\nimport { DeclarationType, NodeType } from \"../../types\";\nimport type { BoxShadowProps, BoxProps } from \"../../types/Drawings\";\nimport type { NodeContext } from \"../Node\";\nimport { JsiDeclarationNode } from \"../Node\";\nimport { processColor } from \"../datatypes\";\nimport { JsiRenderNode } from \"../RenderNode\";\n\nconst inflate = (\n  Skia: Skia,\n  box: SkRRect,\n  dx: number,\n  dy: number,\n  tx = 0,\n  ty = 0\n) =>\n  Skia.RRectXY(\n    Skia.XYWHRect(\n      box.rect.x - dx + tx,\n      box.rect.y - dy + ty,\n      box.rect.width + 2 * dx,\n      box.rect.height + 2 * dy\n    ),\n    box.rx + dx,\n    box.ry + dy\n  );\n\nconst deflate = (\n  Skia: Skia,\n  box: SkRRect,\n  dx: number,\n  dy: number,\n  tx = 0,\n  ty = 0\n) => inflate(Skia, box, -dx, -dy, tx, ty);\n\nexport class BoxShadowNode extends JsiDeclarationNode<\n  BoxShadowProps,\n  BoxShadowProps\n> {\n  constructor(ctx: NodeContext, props: BoxShadowProps) {\n    super(ctx, DeclarationType.Unknown, NodeType.Box, props);\n  }\n\n  materialize() {\n    return this.props;\n  }\n}\n\nexport class BoxNode extends JsiRenderNode<BoxProps> {\n  constructor(ctx: NodeContext, props: BoxProps) {\n    super(ctx, NodeType.Box, props);\n  }\n\n  renderNode({ canvas, paint, opacity }: DrawingContext) {\n    const { box: defaultBox } = this.props;\n    const box = isRRect(defaultBox)\n      ? defaultBox\n      : this.Skia.RRectXY(defaultBox, 0, 0);\n    const shadows = this._children\n      .map((node) => {\n        if (node instanceof BoxShadowNode) {\n          return node.materialize();\n        }\n        return null;\n      })\n      .filter((n): n is BoxShadowProps => n !== null);\n    shadows\n      .filter((shadow) => !shadow.inner)\n      .map((shadow) => {\n        const { color = \"black\", blur, spread = 0, dx = 0, dy = 0 } = shadow;\n        const lPaint = this.Skia.Paint();\n        lPaint.setColor(processColor(this.Skia, color, opacity));\n        lPaint.setMaskFilter(\n          this.Skia.MaskFilter.MakeBlur(BlurStyle.Normal, blur, true)\n        );\n        canvas.drawRRect(\n          inflate(this.Skia, box, spread, spread, dx, dy),\n          lPaint\n        );\n      });\n\n    canvas.drawRRect(box, paint);\n\n    shadows\n      .filter((shadow) => shadow.inner)\n      .map((shadow) => {\n        const { color = \"black\", blur, spread = 0, dx = 0, dy = 0 } = shadow;\n        const delta = this.Skia.Point(10 + Math.abs(dx), 10 + Math.abs(dy));\n        canvas.save();\n        canvas.clipRRect(box, ClipOp.Intersect, false);\n        const lPaint = this.Skia.Paint();\n        lPaint.setColor(processColor(this.Skia, color, opacity));\n        lPaint.setMaskFilter(\n          this.Skia.MaskFilter.MakeBlur(BlurStyle.Normal, blur, true)\n        );\n        const inner = deflate(this.Skia, box, spread, spread, dx, dy);\n        const outer = inflate(this.Skia, box, delta.x, delta.y);\n        canvas.drawDRRect(outer, inner, lPaint);\n        canvas.restore();\n      });\n  }\n}\n"]}