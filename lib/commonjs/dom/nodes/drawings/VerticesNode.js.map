{"version":3,"sources":["VerticesNode.ts"],"names":["VerticesNode","JsiDrawingNode","constructor","ctx","props","NodeType","Vertices","deriveProps","mode","vertices","textures","colors","indices","vertexMode","VertexMode","Triangles","Skia","MakeVertices","map","c","undefined","draw","canvas","paint","blendMode","defaultBlendMode","BlendMode","DstOver","SrcOver","blend","derived","Error","drawVertices"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;AACA;;AAGO,MAAMA,YAAN,SAA2BC,2BAA3B,CAAqE;AAC1EC,EAAAA,WAAW,CAACC,GAAD,EAAmBC,KAAnB,EAAyC;AAClD,UAAMD,GAAN,EAAWE,iBAASC,QAApB,EAA8BF,KAA9B;AACD;;AAESG,EAAAA,WAAW,GAAG;AACtB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,QAAlB;AAA4BC,MAAAA,MAA5B;AAAoCC,MAAAA;AAApC,QAAgD,KAAKR,KAA3D;AACA,UAAMS,UAAU,GAAGL,IAAI,GAAGM,kBAAW,wBAAQN,IAAR,CAAX,CAAH,GAA+BM,kBAAWC,SAAjE;AACA,WAAO,KAAKC,IAAL,CAAUC,YAAV,CACLJ,UADK,EAELJ,QAFK,EAGLC,QAHK,EAILC,MAAM,GAAGA,MAAM,CAACO,GAAP,CAAYC,CAAD,IAAO,6BAAa,KAAKH,IAAlB,EAAwBG,CAAxB,EAA2B,CAA3B,CAAlB,CAAH,GAAsDC,SAJvD,EAKLR,OALK,CAAP;AAOD;;AAEDS,EAAAA,IAAI,OAAoC;AAAA,QAAnC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAmC;AACtC,UAAM;AAAEZ,MAAAA,MAAF;AAAUa,MAAAA;AAAV,QAAwB,KAAKpB,KAAnC;AACA,UAAMqB,gBAAgB,GAAGd,MAAM,GAAGe,iBAAUC,OAAb,GAAuBD,iBAAUE,OAAhE;AACA,UAAMC,KAAK,GAAGL,SAAS,GAAGE,iBAAU,wBAAQF,SAAR,CAAV,CAAH,GAAmCC,gBAA1D;;AACA,QAAI,KAAKK,OAAL,KAAiBV,SAArB,EAAgC;AAC9B,YAAM,IAAIW,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACDT,IAAAA,MAAM,CAACU,YAAP,CAAoB,KAAKF,OAAzB,EAAkCD,KAAlC,EAAyCN,KAAzC;AACD;;AAzByE","sourcesContent":["import type { SkVertices } from \"../../../skia/types\";\nimport { VertexMode, BlendMode } from \"../../../skia/types\";\nimport type { DrawingContext, VerticesProps } from \"../../types\";\nimport { NodeType } from \"../../types\";\nimport { enumKey, processColor } from \"../datatypes\";\nimport { JsiDrawingNode } from \"../DrawingNode\";\nimport type { NodeContext } from \"../Node\";\n\nexport class VerticesNode extends JsiDrawingNode<VerticesProps, SkVertices> {\n  constructor(ctx: NodeContext, props: VerticesProps) {\n    super(ctx, NodeType.Vertices, props);\n  }\n\n  protected deriveProps() {\n    const { mode, vertices, textures, colors, indices } = this.props;\n    const vertexMode = mode ? VertexMode[enumKey(mode)] : VertexMode.Triangles;\n    return this.Skia.MakeVertices(\n      vertexMode,\n      vertices,\n      textures,\n      colors ? colors.map((c) => processColor(this.Skia, c, 1)) : undefined,\n      indices\n    );\n  }\n\n  draw({ canvas, paint }: DrawingContext) {\n    const { colors, blendMode } = this.props;\n    const defaultBlendMode = colors ? BlendMode.DstOver : BlendMode.SrcOver;\n    const blend = blendMode ? BlendMode[enumKey(blendMode)] : defaultBlendMode;\n    if (this.derived === undefined) {\n      throw new Error(\"VerticesNode: vertices is undefined\");\n    }\n    canvas.drawVertices(this.derived, blend, paint);\n  }\n}\n"]}