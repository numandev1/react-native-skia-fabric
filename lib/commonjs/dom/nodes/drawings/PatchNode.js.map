{"version":3,"sources":["PatchNode.ts"],"names":["PatchNode","JsiDrawingNode","constructor","ctx","props","NodeType","Patch","deriveProps","colors","blendMode","patch","defaultBlendMode","BlendMode","DstOver","SrcOver","mode","points","pos","c2","c1","map","c","Skia","undefined","draw","canvas","paint","opacity","derived","Error","texture","drawPatch","ALPHA"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;AACA;;AAGO,MAAMA,SAAN,SAAwBC,2BAAxB,CAGL;AACAC,EAAAA,WAAW,CAACC,GAAD,EAAmBC,KAAnB,EAAsC;AAC/C,UAAMD,GAAN,EAAWE,iBAASC,KAApB,EAA2BF,KAA3B;AACD;;AAEDG,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,SAAV;AAAqBC,MAAAA;AAArB,QAA+B,KAAKN,KAA1C;AACA,UAAMO,gBAAgB,GAAGH,MAAM,GAAGI,iBAAUC,OAAb,GAAuBD,iBAAUE,OAAhE;AACA,UAAMC,IAAI,GAAGN,SAAS,GAAGG,iBAAU,wBAAQH,SAAR,CAAV,CAAH,GAAmCE,gBAAzD,CAHY,CAIZ;AACA;AACA;AACA;AACA;;AACA,WAAO;AACLI,MAAAA,IADK;AAELC,MAAAA,MAAM,EAAE,CACNN,KAAK,CAAC,CAAD,CAAL,CAASO,GADH,EAENP,KAAK,CAAC,CAAD,CAAL,CAASQ,EAFH,EAGNR,KAAK,CAAC,CAAD,CAAL,CAASS,EAHH,EAINT,KAAK,CAAC,CAAD,CAAL,CAASO,GAJH,EAKNP,KAAK,CAAC,CAAD,CAAL,CAASQ,EALH,EAMNR,KAAK,CAAC,CAAD,CAAL,CAASS,EANH,EAONT,KAAK,CAAC,CAAD,CAAL,CAASO,GAPH,EAQNP,KAAK,CAAC,CAAD,CAAL,CAASQ,EARH,EASNR,KAAK,CAAC,CAAD,CAAL,CAASS,EATH,EAUNT,KAAK,CAAC,CAAD,CAAL,CAASO,GAVH,EAWNP,KAAK,CAAC,CAAD,CAAL,CAASQ,EAXH,EAYNR,KAAK,CAAC,CAAD,CAAL,CAASS,EAZH,CAFH;AAgBLX,MAAAA,MAAM,EAAEA,MAAM,GACVA,MAAM,CAACY,GAAP,CAAYC,CAAD,IAAO,6BAAa,KAAKC,IAAlB,EAAwBD,CAAxB,EAA2B,CAA3B,CAAlB,CADU,GAEVE;AAlBC,KAAP;AAoBD;;AAEDC,EAAAA,IAAI,OAA6C;AAAA,QAA5C;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,KAA4C;;AAC/C,QAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,YAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAK1B,KAAzB;AACA,UAAM;AAAEI,MAAAA,MAAF;AAAUQ,MAAAA,MAAV;AAAkBD,MAAAA;AAAlB,QAA2B,KAAKa,OAAtC;AACAH,IAAAA,MAAM,CAACM,SAAP,CACEf,MADF,EAEEW,OAAO,KAAK,CAAZ,GACInB,MADJ,GAEIA,MAAM,IACJA,MAAM,CAACY,GAAP,CAAYC,CAAD,IAAO;AAChBA,MAAAA,CAAC,CAACW,gBAAD,CAAD,GAAWX,CAAC,CAACW,gBAAD,CAAD,GAAWL,OAAtB;AACA,aAAON,CAAP;AACD,KAHD,CALR,EASES,OATF,EAUEf,IAVF,EAWEW,KAXF;AAaD;;AAvDD","sourcesContent":["import type { SkColor, SkPoint } from \"../../../skia/types\";\nimport { BlendMode } from \"../../../skia/types\";\nimport type { DrawingContext, PatchProps } from \"../../types\";\nimport { NodeType } from \"../../types\";\nimport { ALPHA, enumKey, processColor } from \"../datatypes\";\nimport { JsiDrawingNode } from \"../DrawingNode\";\nimport type { NodeContext } from \"../Node\";\n\nexport class PatchNode extends JsiDrawingNode<\n  PatchProps,\n  { points: SkPoint[]; colors: SkColor[] | undefined; mode: BlendMode }\n> {\n  constructor(ctx: NodeContext, props: PatchProps) {\n    super(ctx, NodeType.Patch, props);\n  }\n\n  deriveProps() {\n    const { colors, blendMode, patch } = this.props;\n    const defaultBlendMode = colors ? BlendMode.DstOver : BlendMode.SrcOver;\n    const mode = blendMode ? BlendMode[enumKey(blendMode)] : defaultBlendMode;\n    // Patch requires a path with the following constraints:\n    // M tl\n    // C c1 c2 br\n    // C c1 c2 bl\n    // C c1 c2 tl (the redundant point in the last command is removed)\n    return {\n      mode,\n      points: [\n        patch[0].pos,\n        patch[0].c2,\n        patch[1].c1,\n        patch[1].pos,\n        patch[1].c2,\n        patch[2].c1,\n        patch[2].pos,\n        patch[2].c2,\n        patch[3].c1,\n        patch[3].pos,\n        patch[3].c2,\n        patch[0].c1,\n      ],\n      colors: colors\n        ? colors.map((c) => processColor(this.Skia, c, 1))\n        : undefined,\n    };\n  }\n\n  draw({ canvas, paint, opacity }: DrawingContext) {\n    if (!this.derived) {\n      throw new Error(\"PatchNode: derived props not set\");\n    }\n    const { texture } = this.props;\n    const { colors, points, mode } = this.derived;\n    canvas.drawPatch(\n      points,\n      opacity === 1\n        ? colors\n        : colors &&\n            colors.map((c) => {\n              c[ALPHA] = c[ALPHA] * opacity;\n              return c;\n            }),\n      texture,\n      mode,\n      paint\n    );\n  }\n}\n"]}