{"version":3,"sources":["Node.ts"],"names":["JsiNode","constructor","ctx","type","props","Skia","depMgr","setProps","setProp","name","v","hasChanged","getProps","children","_children","addChild","child","push","dispose","unsubscribeNode","forEach","removeChild","index","indexOf","node","splice","insertChildBefore","before","beforeIndex","JsiDeclarationNode","declarationType","Error","invalidate","setInvalidate","isPaint","DeclarationType","Paint","isImageFilter","ImageFilter","isColorFilter","ColorFilter","isShader","Shader","isMaskFilter","MaskFilter","isPathEffect","PathEffect"],"mappings":"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","sourcesContent":["import type {\n  SkColorFilter,\n  Skia,\n  SkImageFilter,\n  SkMaskFilter,\n  SkShader,\n  SkPathEffect,\n  SkPaint,\n} from \"../../skia/types\";\nimport type { Node, DeclarationNode, NodeType } from \"../types\";\nimport { DeclarationType } from \"../types\";\nimport type { DependencyManager } from \"../../renderer/DependencyManager\";\n\nexport interface NodeContext {\n  Skia: Skia;\n  depMgr: DependencyManager;\n}\n\nexport abstract class JsiNode<P> implements Node<P> {\n  protected _children: JsiNode<unknown>[] = [];\n  protected Skia: Skia;\n  protected depMgr: DependencyManager;\n\n  constructor(ctx: NodeContext, public type: NodeType, protected props: P) {\n    this.Skia = ctx.Skia;\n    this.depMgr = ctx.depMgr;\n  }\n\n  setProps(props: P) {\n    this.props = props;\n  }\n\n  setProp<K extends keyof P>(name: K, v: P[K]) {\n    const hasChanged = this.props[name] !== v;\n    this.props[name] = v;\n    return hasChanged;\n  }\n\n  getProps() {\n    return this.props;\n  }\n\n  children() {\n    return this._children;\n  }\n\n  addChild(child: Node<unknown>) {\n    this._children.push(child as JsiNode<unknown>);\n  }\n\n  dispose() {\n    this.depMgr.unsubscribeNode(this);\n    this._children.forEach((child) => child.dispose());\n  }\n\n  removeChild(child: Node<unknown>) {\n    const index = this._children.indexOf(child as JsiNode<unknown>);\n    if (index !== -1) {\n      const [node] = this._children.splice(index, 1);\n      node.dispose();\n    }\n  }\n\n  insertChildBefore(child: Node<unknown>, before: Node<unknown>) {\n    const index = this._children.indexOf(child as JsiNode<unknown>);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n    }\n    const beforeIndex = this._children.indexOf(before as JsiNode<unknown>);\n    this._children.splice(beforeIndex, 0, child as JsiNode<unknown>);\n  }\n}\n\nexport type Invalidate = () => void;\n\nexport abstract class JsiDeclarationNode<\n    P,\n    T,\n    Nullable extends null | never = never\n  >\n  extends JsiNode<P>\n  implements DeclarationNode<P, T, Nullable>\n{\n  private invalidate: Invalidate = () => {};\n\n  constructor(\n    ctx: NodeContext,\n    public declarationType: DeclarationType,\n    type: NodeType,\n    props: P\n  ) {\n    super(ctx, type, props);\n  }\n\n  abstract materialize(): T | Nullable;\n\n  addChild(child: Node<unknown>): void {\n    if (!(child instanceof JsiDeclarationNode)) {\n      throw new Error(`Cannot add child of type ${child.type} to ${this.type}`);\n    }\n    super.addChild(child);\n    this.invalidate();\n  }\n\n  insertChildBefore(child: Node<unknown>, before: Node<unknown>): void {\n    if (!(child instanceof JsiDeclarationNode)) {\n      throw new Error(`Cannot add child of type ${child.type} to ${this.type}`);\n    }\n    super.insertChildBefore(child, before);\n    this.invalidate();\n  }\n\n  dispose() {\n    this.invalidate();\n    super.dispose();\n  }\n\n  setInvalidate(invalidate: Invalidate) {\n    this.invalidate = invalidate;\n  }\n\n  setProps(props: P) {\n    super.setProps(props);\n    this.invalidate();\n  }\n\n  setProp<K extends keyof P>(name: K, v: P[K]) {\n    const hasChanged = super.setProp(name, v);\n    if (hasChanged) {\n      this.invalidate();\n    }\n    return hasChanged;\n  }\n\n  isPaint(): this is DeclarationNode<unknown, SkPaint> {\n    return this.declarationType === DeclarationType.Paint;\n  }\n\n  isImageFilter(): this is DeclarationNode<unknown, SkImageFilter> {\n    return this.declarationType === DeclarationType.ImageFilter;\n  }\n\n  isColorFilter(): this is DeclarationNode<unknown, SkColorFilter> {\n    return this.declarationType === DeclarationType.ColorFilter;\n  }\n\n  isShader(): this is DeclarationNode<unknown, SkShader> {\n    return this.declarationType === DeclarationType.Shader;\n  }\n\n  isMaskFilter(): this is DeclarationNode<unknown, SkMaskFilter> {\n    return this.declarationType === DeclarationType.MaskFilter;\n  }\n\n  isPathEffect(): this is DeclarationNode<unknown, SkPathEffect> {\n    return this.declarationType === DeclarationType.PathEffect;\n  }\n}\n"]}