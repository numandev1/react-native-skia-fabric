{"version":3,"sources":["Canvas.tsx"],"names":["skiaReconciler","skHostConfig","injectIntoDevTools","bundleType","version","rendererPackageName","render","element","root","container","updateContainer","depMgr","update","useCanvasRef","Canvas","forwardedRef","children","style","debug","mode","onTouch","size","width","height","canvasCtx","Skia","innerRef","ref","useCombinedRefs","tick","setTick","redraw","t","registerValues","values","current","Error","Container","DependencyManager","createContainer","paint","Paint","onDraw","canvas","info","timestamp","touches","reset","ctx","opacity","center","x","y","draw","remove","refs","targetRef","React","useRef","useEffect","forEach"],"mappings":"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","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  useCallback,\n  useMemo,\n  forwardRef,\n  useRef,\n} from \"react\";\nimport type {\n  RefObject,\n  ReactNode,\n  ComponentProps,\n  MutableRefObject,\n  ForwardedRef,\n} from \"react\";\nimport type { OpaqueRoot } from \"react-reconciler\";\nimport ReactReconciler from \"react-reconciler\";\n\nimport { SkiaView, useDrawCallback } from \"../views\";\nimport type { TouchHandler } from \"../views\";\nimport { useValue } from \"../values/hooks/useValue\";\nimport { Skia } from \"../skia/Skia\";\nimport type { SkiaValue } from \"../values\";\n\nimport { debug as hostDebug, skHostConfig } from \"./HostConfig\";\n// import { debugTree } from \"./nodes\";\nimport { Container } from \"./Container\";\nimport { DependencyManager } from \"./DependencyManager\";\nimport { CanvasProvider } from \"./useCanvas\";\n\nexport const skiaReconciler = ReactReconciler(skHostConfig);\n\nskiaReconciler.injectIntoDevTools({\n  bundleType: 1,\n  version: \"0.0.1\",\n  rendererPackageName: \"react-native-skia\",\n});\n\nconst render = (element: ReactNode, root: OpaqueRoot, container: Container) => {\n  skiaReconciler.updateContainer(element, root, null, () => {\n    hostDebug(\"updateContainer\");\n    container.depMgr.update();\n  });\n};\n\nexport const useCanvasRef = () => useRef<SkiaView>(null);\n\nexport interface CanvasProps extends ComponentProps<typeof SkiaView> {\n  ref?: RefObject<SkiaView>;\n  children: ReactNode;\n  onTouch?: TouchHandler;\n}\n\nexport const Canvas = forwardRef<SkiaView, CanvasProps>(\n  ({ children, style, debug, mode, onTouch }, forwardedRef) => {\n    const size = useValue({ width: 0, height: 0 });\n    const canvasCtx = useMemo(() => ({ Skia, size }), [size]);\n    const innerRef = useCanvasRef();\n    const ref = useCombinedRefs(forwardedRef, innerRef);\n    const [tick, setTick] = useState(0);\n    const redraw = useCallback(() => {\n      setTick((t) => t + 1);\n    }, []);\n\n    const registerValues = useCallback(\n      (values: Array<SkiaValue<unknown>>) => {\n        if (ref.current === null) {\n          throw new Error(\"Canvas ref is not set\");\n        }\n        return ref.current.registerValues(values);\n      },\n      [ref]\n    );\n\n    const container = useMemo(() => {\n      return new Container(Skia, new DependencyManager(registerValues), redraw);\n    }, [redraw, registerValues]);\n\n    const root = useMemo(\n      () => skiaReconciler.createContainer(container, 0, false, null),\n      [container]\n    );\n    // Render effect\n    useEffect(() => {\n      render(\n        <CanvasProvider value={canvasCtx}>{children}</CanvasProvider>,\n        root,\n        container\n      );\n    }, [children, root, redraw, container, canvasCtx]);\n\n    const paint = useMemo(() => Skia.Paint(), []);\n\n    // Draw callback\n    const onDraw = useDrawCallback(\n      (canvas, info) => {\n        // TODO: if tree is empty (count === 1) maybe we should not render?\n        const { width, height, timestamp } = info;\n        if (onTouch) {\n          onTouch(info.touches);\n        }\n        if (\n          width !== canvasCtx.size.current.width ||\n          height !== canvasCtx.size.current.height\n        ) {\n          canvasCtx.size.current = { width, height };\n        }\n        paint.reset();\n        const ctx = {\n          width,\n          height,\n          timestamp,\n          canvas,\n          paint,\n          opacity: 1,\n          ref,\n          center: { x: width / 2, y: height / 2 },\n          Skia,\n        };\n        container.draw(ctx);\n      },\n      [tick, onTouch]\n    );\n\n    useEffect(() => {\n      return () => {\n        skiaReconciler.updateContainer(null, root, null, () => {\n          container.depMgr.remove();\n        });\n      };\n    }, [container, root]);\n\n    return (\n      <SkiaView\n        ref={ref}\n        style={style}\n        onDraw={onDraw}\n        mode={mode}\n        debug={debug}\n      />\n    );\n  }\n);\n\n/**\n * Combines a list of refs into a single ref. This can be used to provide\n * both a forwarded ref and an internal ref keeping the same functionality\n * on both of the refs.\n * @param refs Array of refs to combine\n * @returns A single ref that can be used in a ref prop.\n */\nconst useCombinedRefs = <T,>(\n  ...refs: Array<MutableRefObject<T> | ForwardedRef<T>>\n) => {\n  const targetRef = React.useRef<T>(null);\n  React.useEffect(() => {\n    refs.forEach((ref) => {\n      if (ref) {\n        if (typeof ref === \"function\") {\n          ref(targetRef.current);\n        } else {\n          ref.current = targetRef.current;\n        }\n      }\n    });\n  }, [refs]);\n  return targetRef;\n};\n"]}